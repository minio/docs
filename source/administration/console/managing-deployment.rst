
.. _minio-console-managing-deployment:

:orphan:

========================
Managing Your Deployment
========================

.. default-domain:: minio

.. contents:: Table of Contents
   :local:
   :depth: 2

You can use the MinIO Console to perform many of the deployment monitoring and management functions available in MinIO, such as:

- :ref:`Monitor <minio-console-monitoring>` the deployment activity and health by viewing a dashboard of metrics, server or audit logs, trace history, S3 events, or drive health.
- Configure alerts by adding or managing a :ref:`notification target <minio-console-notifications>`.
- Configure deployment :ref:`settings <minio-console-settings>`.

.. important::

   The MinIO Console is a web-based interface for the MinIO Server.

   It is distinct and independent from the MinIO Kubernetes Operator Console which was deprecated and removed as of Operator 6.0.0.

.. _minio-console-monitoring:

Monitoring
----------

The :guilabel:`Monitoring` section provides an interface for monitoring the MinIO deployment.

The section contains the following subsections:
Some subsections may not be visible if the authenticated user does not have the :ref:`required administrative permissions <minio-policy-mc-admin-actions>`.

Metrics
~~~~~~~

The Console :guilabel:`Dashboard` section displays metrics for the MinIO deployment. 
The default view provides a high-level overview of the deployment status, including the uptime and availability of individual servers and drives.

The Console also supports displaying time-series and historical data by querying a :prometheus-docs:`Prometheus <prometheus/latest/getting_started/>` service configured to scrape data from the MinIO deployment. 
Specifically, the MinIO Console uses the :prometheus-docs:`Prometheus query API <prometheus/latest/querying/api/>` to retrieve stored metrics data and display historical metrics
See :ref:`minio-metrics-collect-using-prometheus` for more information on scraping MinIO metrics into Prometheus.

Logs
~~~~

The Console :guilabel:`Logs` section displays :ref:`server logs <minio-logging>` generated by the MinIO Deployment.

- Use the :guilabel:`Nodes` dropdown to filter logs to a subset of server nodes in the MinIO deployment.

- Use the :guilabel:`Log Types` dropdown to filter logs to a subset of log types.

- Use the :guilabel:`Filter` to apply text filters to the log results

Select the :guilabel:`Start Logs` button to begin collecting logs using the selected filters and settings.

Audit
~~~~~

.. important::

   MinIO plans to deprecate the Tenant Console Audit Log feature and remove it in an upcoming release.
   As an alternative, use any webhook-capable database or logging service to capture :ref:`audit logs <minio-logging-publish-audit-logs>` from the Tenant.

The Audit Log section provides an interface for viewing :ref:`audit logs <minio-logging>` collected by a configured PostgreSQL service.

Trace
~~~~~

The :guilabel:`Trace` section provides HTTP trace functionality for a bucket or buckets on the deployment. 
This section provides similar functionality to :mc:`mc admin trace`.

You can modify the trace to show only specific trace calls.
The default is to show only :guilabel:`S3` related HTTP traces.
      
Select :guilabel:`Filters` to open additional filters to apply to trace output, such as restricting the :guilabel:`Path` on which the trace applies to a specific bucket or bucket prefix.

Watch
~~~~~

The :guilabel:`Watch` section displays S3 events as they occur on the selected bucket. 
This section provides similar functionality to :mc:`mc watch`.

Encryption
~~~~~~~~~~

The :guilabel:`Encryption` section allows you to view the status and metrics for configured :kes-docs:`Key Encryption Service <>` providers.

.. _minio-console-notifications:

Events
------

.. versionchanged:: Console 0.23.1

   Notifications section renamed to Events.

The :guilabel:`Events` section provides an interface to view, add, or remove :ref:`Event Notification <minio-bucket-notifications>` targets.

You can use this screen configure MinIO to push notification events to the one or more target destinations, including Redis, MySQL, Kafka, PostgreSQL, AMQP, MQTT, Elastic Search, NATS, NSQ, or a Webhook.

Select the :guilabel:`Add Event Destination +` button to add a new event target to the deployment.

You can select an existing notification target from the list to view its details or delete the target.

.. _minio-console-encryption:

Encryption
----------

The :guilabel:`Encryption` setting provides an interface for listing, creating, and deleting keys for use with :ref:`MinIO Server-Side Encryption <minio-sse>`.

You can use keys created or listed in this view for object encryption operations, including setting a :ref:`bucket-level default key <minio-console-buckets>`.

.. important::

   Deleting a key prevents MinIO from decrypting any objects protected with that key.
   If no backups of that key exist, deleting a key renders objects permanently unreadable.
   See :ref:`minio-encryption-sse-secure-erasure-locking` for more information.

.. _minio-console-settings:

Configuration
-------------

The :guilabel:`Settings` section provides an interface for viewing and retrieving :ref:`configuration settings <minio-server-configuration-settings>` for all MinIO Servers in the deployment. 
Use the buttons to :guilabel:`Export` and :guilabel:`Import` the settings between deployments.

This section contains the following subsections.

- Region
- Compression
- API
- Heal
- Scanner
- Etcd
- Logger Webhook
- Audit :ref:`Webhook <minio-bucket-notifications-publish-webhook>`
- Audit :ref:`Kafka <minio-bucket-notifications-publish-kafka>`

.. versionadded:: Console v0.24.0

   Environment variable configuration settings override any customizations added in the MinIO Console.
   Hover your mouse cover over a configuration field to display a tooltip that indicates whether an environment variable controls the setting.

Some subsections may not be visible if the authenticated user does not have the :ref:`required administrative permissions <minio-policy-mc-admin-actions>`.

The interface functionality mimics that of using :mc-cmd:`mc admin config get` or :mc-cmd:`mc admin config set`.
Refer to those commands for details on how to define the many options.

Some configuration settings may require restarting the MinIO deployment to apply changes.
