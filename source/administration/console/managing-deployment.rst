
.. _minio-console-managing-deployment:

========================
Managing Your Deployment
========================

.. default-domain:: minio

.. contents:: Table of Contents
   :local:
   :depth: 2

You can use the MinIO Console to perform many of the deployment monitoring and management functions available in MinIO, such as:

- :ref:`Monitor <minio-console-monitoring>` the deployment activity and health by viewing a dashboard of metrics, server or audit logs, trace history, S3 events, or drive health.
- Configure alerts by adding or managing a :ref:`notification target <minio-console-notifications>`.
- Set up :ref:`site replication <minio-console-site-replication>` to synchronize datacenters for timely access across geographically dispersed workforces or for disaster preparedness.
- Configure deployment :ref:`settings <minio-console-settings>`.

.. _minio-console-monitoring:

Monitoring
----------

The :guilabel:`Monitoring` section provides an interface for monitoring the MinIO deployment.

The section contains the following subsections:
Some subsections may not be visible if the authenticated user does not have the :ref:`required administrative permissions <minio-policy-mc-admin-actions>`.

Metrics
~~~~~~~

The Console :guilabel:`Dashboard` section displays metrics for the MinIO deployment. 
The default view provides a high-level overview of the deployment status, including the uptime and availability of individual servers and drives.

The Console also supports displaying time-series and historical data by querying a :prometheus-docs:`Prometheus <prometheus/latest/getting_started/>` service configured to scrape data from the MinIO deployment. 
Specifically, the MinIO Console uses :prometheus-docs:`Prometheus query API <prometheus/latest/querying/api/>` to retrieve stored metrics data and display historical metrics:

See :ref:`minio-console-metrics` for more information on the historical metric visualization.

Logs
~~~~

The Console :guilabel:`Logs` section displays :ref:`server logs <minio-logging>` generated by the MinIO Deployment.

- Use the :guilabel:`Nodes` dropdown to filter logs to a subset of server nodes in the MinIO deployment.

- Use the :guilabel:`Log Types` dropdown to filter logs to a subset of log types.

- Use the :guilabel:`Filter` to apply text filters to the log results

Select the :guilabel:`Start Logs` button to begin collecting logs using the selected filters and settings.

Audit
~~~~~

The Audit Log section provides an interface for viewing :ref:`audit logs <minio-logging>` collected by a configured PostgreSQL service.

The Audit Logging feature is configured and enabled automatically for MinIO deployments created using the :ref:`MinIO Operator Console <minio-operator-console>`.

Trace
~~~~~

The :guilabel:`Trace` section provides HTTP trace functionality for a bucket or buckets on the deployment. 
This section provides similar functionality to :mc:`mc admin trace`.

You can modify the trace to show only specific trace calls.
The default is to show only :guilabel:`S3` related HTTP traces.
      
Select :guilabel:`Filters` to open additional filters to apply to trace output, such as restricting the :guilabel:`Path` on which the trace applies to a specific bucket or bucket prefix.

Watch
~~~~~

The :guilabel:`Watch` section displays S3 events as they occur on the selected bucket. 
This section provides similar functionality to :mc:`mc watch`.

Drives
~~~~~~

The :guilabel:`Drives` section displays the healing status for a bucket. 
MinIO automatically heals objects and drives when it detects problems, such as drive-level corruption or a replacement drive.

.. important::

   MinIO does not recommend performing manual healing unless explicitly directed by support. 


.. _minio-console-notifications:

Notifications
-------------

The :guilabel:`Notifications` section provides an interface to view, add, or remove :ref:`Bucket Notification <minio-bucket-notifications>` targets.

You can use this screen configure MinIO to push notification events to the one or more target destinations, including Redis, MySQL, Kafka, PostgreSQL, AMQP, MQTT, Elastic Search, NATS, NSQ, or a Webhook.

Select the :guilabel:`Add Notification Target +` button to add a new target to the deployment.

You can select an existing notification target from the list to view its details or delete the target.

.. _minio-console-site-replication:

Site Replication
----------------

The :guilabel:`Site Replication` section provides an interface for adding and managing the :ref:`site replication <minio-site-replication-overview>` configuration for the deployment.

Configuring site replication requires that only a single site have existing buckets or objects (if any).

.. _minio-console-settings:

Settings
--------

The :guilabel:`Settings` section provides an interface for viewing and retrieving :ref:`configuration settings <minio-server-configuration-settings>` for all MinIO Servers in the deployment. 

This section contains the following subsections.

- Region
- Compression
- API
- Heal
- Scanner
- Etcd
- Logger Webhook
- Audit Webhook

Some subsections may not be visible if the authenticated user does not have the :ref:`required administrative permissions <minio-policy-mc-admin-actions>`.

The interface functionality mimics that of using :mc-cmd:`mc admin config get` or :mc-cmd:`mc admin config set`.
Refer to those commands for details on how to define the many options.

Some configuration settings may require restarting the MinIO deployment to apply changes.