.. _developers-object-lambda:

=================================
Transforms with Object Lambda
=================================

.. default-domain:: minio

.. contents:: Table of Contents
   :local:
   :depth: 2

The following documentation covers transforming the contents of an object with MinIO's Object Lambda.
Object Lambda may be used to transform objects in many ways, such as redacting personally identifable information (PII) or enriching data with information from other sources.
MinIO's Object Lambda enables application developers to process data retrieved from MinIO before returning it to an application.
Register a Lambda Function target on MinIO and use it to transform data for application GET requests on demand. 

Object Lambda handlers can be written in any language capable of sending and receiving HTTP requests.
The handler returns the transformed data back to MinIO, which sends it to the process that triggered the request.
The original object is not changed.

Handlers can transform objects in any way needed for your use case, including using a :ref:`MinIO SDK <minio-drivers>` to perform MinIO actions such as writing the new object to a bucket.
Although to avoid blocking the calling process, you may wish to avoid long-running operations in a handler.

Object Lambda sends the handler information about the original object in the ``getObjectContext`` property of the JSON request payload:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Value
     - Description

   * - ``inputS3Url``
     - A `presigned URL <https://min.io/docs/minio/linux/developers/go/API.html#presigned-operations>`__ for the original object. This URL allows the handler to access an object without the MinIO credentials usually required.
       The process initiating the transformation generates the URL and includes it as part of the initial request.

   * - ``outputRoute``
     - A token that allows MinIO to validate the destination for the transformed object. Return this value with the response in an ``x-amz-request-route`` header.

   * - ``outputToken``
     - A token that allows MinIO to validate the response. Return this value in the response in an ``x-amz-request-token`` header.

.. admonition:: Response headers
   :class: note

    Handlers **must** include the ``outputRoute`` and ``outputToken`` tokens in the appropriate response headers.
    This allows MinIO to correctly validate the response from the handler.

MinIO recieves the response from the handler and sends the transformed contents back to the original caller.

Register a handler by setting the following :ref:`MinIO server environment variables <minio-server-envvar-object-lambda-webhook>`:

:envvar:`MINIO_LAMBDA_WEBHOOK_ENABLE_functionname <MINIO_LAMBDA_WEBHOOK_ENABLE>`
   Enable or disable Object Lambda for a handler function.
   For multiple handlers, set this environment variable for each function name.

:envvar:`MINIO_LAMBDA_WEBHOOK_ENDPOINT_functionname <MINIO_LAMBDA_WEBHOOK_ENDPOINT>`
   Register an endpoint for a handler function.
   For multiple handlers, set this environment variable for each function endpoint.


Example
-------

Transform the contents of an object using Python, Go, and ``curl``:

- Create and register an Object Lambda handler.
- Create a bucket and an object to transform.
- Request and display the transformed object contents.

Prerequsites:

- An existing :ref:`MinIO <minio-installation>` deployment
- Working Python (3.8+) and Golang development environments
- :doc:`The MinIO Go SDK </developers/go/minio-go>`


Create a Lambda Handler
~~~~~~~~~~~~~~~~~~~~~~~~~

The sample handler, written in Python, retrieves the target object using a `presigned URL <https://min.io/docs/minio/linux/developers/go/API.html#presigned-operations>`__ generated by the caller.
The handler then transforms the object's contents and returns the new text.
It uses the `Flask web framework <https://flask.palletsprojects.com/en/2.2.x/>`__ and Python 3.8+. 

The following command installs Flask and other needed dependancies:

.. code-block:: shell
   :class: copyable

   pip install flask requests

The handler calls ``upper()`` to convert the text to all uppercase letters.
It then sends the results back to MinIO, which returns it to the caller.

.. code-block:: py
   :class: copyable

   from flask import Flask, request, abort, make_response
   import requests

   app = Flask(__name__)
   @app.route('/', methods=['POST'])
   def get_webhook():
      if request.method == 'POST':
         # Get the request event from the 'POST' call
         event = request.json

	 # Get the object context
         object_context = event["getObjectContext"]

         # Get the presigned URL
	 # Used to fetch the original object from MinIO
         s3_url = object_context["inputS3Url"]

         # Extract the route and request tokens from the input context
         request_route = object_context["outputRoute"]
         request_token = object_context["outputToken"]

         # Get the original S3 object using the presigned URL
         r = requests.get(s3_url)
         original_object = r.content.decode('utf-8')

         # Transform the text in the original object to uppercase
         transformed_object = original_object.upper()

         # Return the object back to Object Lambda, with required headers
         # This sends the transformed data to MinIO
	 # and then to the user
         resp = make_response(transformed_object, 200)
         resp.headers['x-amz-request-route'] = request_route
         resp.headers['x-amz-request-token'] = request_token
         return resp

      else:
         abort(400)

   if __name__ == '__main__':
      app.run()


Start the Handler
+++++++++++++++++

Use the following command to start the handler in your local development environment:

.. code-block:: shell
   :class: copyable

   python lambda_handler.py

The output resembles the following:

.. code-block:: shell

    * Serving Flask app 'lambda_handler'
    * Debug mode: off
   WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
    * Running on http://127.0.0.1:5000
   Press CTRL+C to quit

Once the handler is running, start MinIO with the :envvar:`MINIO_LAMBDA_WEBHOOK_ENABLE` and :envvar:`MINIO_LAMBDA_WEBHOOK_ENDPOINT` environment variables to register the function with MinIO.
To identify the specific Object Lambda handler, append the name of the function to the name of the environment variable:

.. code-block:: shell
   :class: copyable

   MINIO_LAMBDA_WEBHOOK_ENABLE_myfunction=on MINIO_LAMBDA_WEBHOOK_ENDPOINT_myfunction=http://localhost:5000 minio server /data

Replace ``myfunction`` with the name of your handler function and ``/data`` with the location of the MinIO directory for your local deployment. 
The output resembles the following:

.. code-block:: shell

   MinIO Object Storage Server
   Copyright: 2015-2023 MinIO, Inc.
   License: GNU AGPLv3 <https://www.gnu.org/licenses/agpl-3.0.html>
   Version: RELEASE.2023-03-24T21-41-23Z (go1.19.7 linux/arm64)
   
   Status:         1 Online, 0 Offline. 
   API: http://192.168.64.21:9000  http://127.0.0.1:9000       
   RootUser: minioadmin 
   RootPass: minioadmin 
   Object Lambda ARNs: arn:minio:s3-object-lambda::myfunction:webhook 


Test the Handler Function
~~~~~~~~~~~~~~~~~~~~~~~~~

To test the Lambda handler function, first create an object to transform.
Then invoke the handler, in this case with `curl`, using the presigned URL from a Go function.

#. Create a bucket and object for the handler to transform.

   .. code-block:: shell
      :class: copyable

      mc alias set myminio/ http://localhost:9000 minioadmin minioadmin
      mc mb myminio/myfunctionbucket
      cat > testobject << EOF
      Hello, World!
      EOF
      mc cp testobject myminio/myfunctionbucket/

#. Invoke the Handler

   The following Go code uses the :doc:`The MinIO Go SDK </developers/go/minio-go>` to generate a presigned URL and print it to ``stdout``.

   .. code-block:: go
      :class: copyable

      package main

      import (
         "context"
         "log"
         "net/url"
         "time"
         "fmt"

         "github.com/minio/minio-go/v7"
         "github.com/minio/minio-go/v7/pkg/credentials"
      )

      func main() {

         // Connect to the MinIO deployment
         s3Client, err := minio.New("localhost:9000", &minio.Options{
            Creds:  credentials.NewStaticV4("my_admin_user", "my_admin_password", ""),
            Secure: false,
         })
         if err != nil {
            log.Fatalln(err)
         }

         // Set the Lambda function target using its ARN
         reqParams := make(url.Values)
         reqParams.Set("lambdaArn", "arn:minio:s3-object-lambda::myfunction:webhook")

         // Generate a presigned url to access the original object
         presignedURL, err := s3Client.PresignedGetObject(context.Background(), "myfunctionbucket", "testobject", time.Duration(1000)*time.Second, reqParams)
         if err != nil {
            log.Fatalln(err)
         }
	 
         // Print the URL to stdout
         fmt.Println(presignedURL)
      }      

   In the code above, replace the following values:

   - Replace ``my_admin_user`` and ``my_admin_password`` with root credentials for a MinIO deployment
   - Replace ``myfunction`` with the same function name set in the ``MINIO_LAMBDA_WEBHOOK_ENABLE`` and ``MINIO_LAMBDA_WEBHOOK_ENDPOINT`` environment variables.

   To retrieve the transformed object, execute the Go code with ``curl`` to generate a GET request:

   .. code-block:: shell
      :class: copyable

      curl -v $(go run presigned.go)

   ``curl`` runs the Go code and then retrieves the object with a GET request to the presigned URL.
   The output resembles the following:

   .. code-block:: shell

      *   Trying 127.0.0.1:9000...
      * Connected to localhost (127.0.0.1) port 9000 (#0)
      > GET /myfunctionbucket/testobject?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=minioadmin%2F20230406%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230406T184749Z&X-Amz-Expires=1000&X-Amz-SignedHeaders=host&lambdaArn=arn%3Aminio%3As3-object-lambda%3A%3Amyfunction%3Awebhook&X-Amz-Signature=68fe7e03929a7c0da38255121b2ae09c302840c06654d1b79d7907d942f69915 HTTP/1.1
      > Host: localhost:9000
      > User-Agent: curl/7.81.0
      > Accept: */*
      > 
      * Mark bundle as not supporting multiuse
      < HTTP/1.1 200 OK
      < Content-Security-Policy: block-all-mixed-content
      < Strict-Transport-Security: max-age=31536000; includeSubDomains
      < Vary: Origin
      < Vary: Accept-Encoding
      < X-Amz-Id-2: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      < X-Amz-Request-Id: 17536CF16130630E
      < X-Content-Type-Options: nosniff
      < X-Xss-Protection: 1; mode=block
      < Date: Thu, 06 Apr 2023 18:47:49 GMT
      < Content-Length: 14
      < Content-Type: text/plain; charset=utf-8
      < 
      HELLO, WORLD!
      * Connection #0 to host localhost left intact



